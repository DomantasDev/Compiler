# TODO for, static?
# using ...?
# this in Main
# MAYBE: make assignment an expression

<START> ::= <USINGS> <CLASSES> | <CLASSES>

#USING
<USINGS> ::= <USING> | <USINGS> <USING>
<USING> ::= <KW_USING> <STRING> <SEMICOLON>

#CLASS
<CLASSES> ::= <CLASS_DECL> | <CLASSES> <CLASS_DECL>
<CLASS_DECL> ::= <KW_CLASS> <IDENT> <CLASS_BODY> | <KW_CLASS> <IDENT> <EXTENDS> <CLASS_BODY>  
<EXTENDS> ::= <KW_EXTENDS> <IDENT>
<CLASS_BODY> ::= <BRACE_O> <CLASS_MEMBERS> <BRACE_C> | <BRACE_O> <BRACE_C>
<CLASS_MEMBERS> ::= <CLASS_MEMBER> | <CLASS_MEMBERS> <CLASS_MEMBER>
<CLASS_MEMBER> ::= <METHOD_DECL> | <CTOR_DECL> | <VARIABLE_DECL_STMT> <SEMICOLON>

#CONSTRUCTOR
<CTOR_DECL> ::= <CTOR> <BODY>
<CTOR> ::= <CTOR_SIGNATURE> | <CTOR_SIGNATURE>  <BASE_CTOR_CALL>
<CTOR_SIGNATURE> ::= <VISIBILITY> <KW_CTOR> <PARAM_LIST>
<BASE_CTOR_CALL> ::= <COLON> <BASE> <ARG_LIST>
#METHOD DECLARATION
<METHOD_DECL> ::= <VISIBILITY> <METHOD_SIGNATURE> <BODY> | <VISIBILITY> <VIRTUAL_OVERRIDE> <METHOD_SIGNATURE> <BODY>
<METHOD_SIGNATURE> ::= <RETURN_TYPE> <IDENT> <PARAM_LIST>
<BODY> ::= <BRACE_O> <STMTS> <BRACE_C> | <BRACE_O> <BRACE_C>

<VISIBILITY> ::= <KW_PRIVATE> | <KW_PROTECTED>| <KW_PUBLIC>
<VIRTUAL_OVERRIDE> ::= <KW_VIRTUAL> | <KW_OVERRIDE>

<RETURN_TYPE> ::= <TYPE> | <KW_VOID>
<TYPE> ::= <SYSTEM_TYPE> | <IDENT>
<SYSTEM_TYPE> ::= <KW_INT> | <KW_STRING> | <KW_FLOAT> | <KW_BOOL>

#PARAMETERS
<PARAM_LIST> ::= <PAREN_O> <PARAMS> <PAREN_C> | <PAREN_O> <PAREN_C>
<PARAMS> ::= <PARAM> | <PARAMS> <COMMA> <PARAM>
<PARAM> ::= <TYPE> <IDENT>

#STATEMENT
<STMTS> ::= <STMT> | <STMTS> <STMT>
<STMT> ::= <BREAK_STMT> <SEMICOLON> | <RETURN_STMT> <SEMICOLON> | <CONTINUE_STMT> <SEMICOLON> | <ASSIGN_STMT> <SEMICOLON> | <LOCAL_VARIABLE_DECL_STMT> <SEMICOLON> | <VARIABLE_DECL_STMT> <SEMICOLON> | <EXPR_STMT> <SEMICOLON> | <WRITE_STMT> <SEMICOLON> | <READ_STMT> <SEMICOLON> | <WHILE_STMT> | <IF_STMT> |

<EXPR_STMT> ::= <EXPR>
<RETURN_STMT> ::= <KW_RETURN> | <KW_RETURN> <EXPR>
<BREAK_STMT> ::= <KW_BREAK>
<CONTINUE_STMT> ::= <KW_CONTINUE>
<ASSIGN_STMT> ::= <IDENT> <OP_ASSIGN> <EXPR> # nereusint
<LOCAL_VARIABLE_DECL_STMT> ::= <TYPE> <IDENT> | <TYPE> <IDENT> <OP_ASSIGN> <EXPR>
<VARIABLE_DECL_STMT> ::= <VISIBILITY> <TYPE> <IDENT> | <VISIBILITY> <TYPE> <IDENT> <OP_ASSIGN> <EXPR>
<WHILE_STMT> ::= <KW_WHILE> <PAREN_O> <EXPR> <PAREN_C> <BODY>
<IF_STMT> ::= <IF> | <IF> <ELSE>
<IF> ::= <KW_IF> <PAREN_O> <EXPR> <PAREN_C> <BODY>
<ELSE> ::= <KW_ELSE> <BODY> | <KW_ELSE> <IF_STMT> 

<WRITE_STMT> ::= <KW_WRITE> <ARGS>

<READ_STMT> ::= <KW_READ> <VAR_LIST>
<VAR_LIST> ::= <VAR> | <VAR_LIST> <COMMA> <VAR>

#EXPRESSION
<EXPR> ::= <OR>
<OR> ::= <AND> | <OR> <OR_OP> <AND>
<AND> ::= <EQUALS> | <AND> <AND_OP> <EQUALS>
<EQUALS> ::= <COMPARE> | <EQUALS> <EQUALS_OP> <COMPARE>
<COMPARE> ::= <ADD> | <COMPARE> <COMPARE_OP> <ADD> 
<ADD> ::= <MULT> | <ADD> <ADD_OP> <MULT>
<MULT> ::= <DOT> | <MULT> <MULT_OP> <DOT> 
<DOT> ::=  <PRIMARY> | <DOT> <DOT_OP> <IDENT> # member access
<PRIMARY> ::= <VAR> | <NUMBER> | <BOOL> | <STRING> | <PAREN> | <NEG> | <NOT> | <METHOD_CALL> | <OBJ_CREATION> | <CAST> | <NULL> | <THIS> | <BASE>

<PAREN> ::= <PAREN_O> <EXPR> <PAREN_C>
<NEG> ::= "-" <EXPR>
<NOT> ::= <OP_NOT> <EXPR>
<CAST> ::= <PAREN_O> <TYPE> <PAREN_C> <EXPR>
<OBJ_CREATION> ::= <KW_NEW> <IDENT> <ARG_LIST>
<METHOD_CALL> ::= <METHOD_NAME> <ARG_LIST>

<OR_OP> ::= "|"
<AND_OP> ::= "&"
<EQUALS_OP> ::= "=" | "<>"
<COMPARE_OP> ::= ">" | "<" | ">=" | "<="
<ADD_OP> ::= "+" | "-"
<MULT_OP> ::= "*" | "/"
<DOT_OP> ::= "."

#ARGUMENTS
<ARG_LIST> ::= <PAREN_O> <ARGS> <PAREN_C> | <PAREN_O> <PAREN_C>
<ARGS> ::= <EXPR> | <ARGS> <COMMA> <EXPR>

#IDENT
<METHOD_NAME> ::= <IDENT>
<VAR> ::= <IDENT>

<IDENT> ::=  <IDENT_START> | <IDENT_START> <IDENT_CHARS>
<IDENT_START> ::= <LETTER> | "_"

<IDENT_CHARS> ::= <IDENT_CHAR> | <IDENT_CHARS> <IDENT_CHAR>
<IDENT_CHAR> ::= <LETTER> | <DIGIT> | "_"

#STRING
<STRING> ::= "\"" <STRING_CHARS> "\"" | "\"" "\""
<STRING_CHARS> ::= <STRING_CHAR> | <STRING_CHARS> <STRING_CHAR>
<STRING_CHAR> ::= <ESCAPED_CHAR> | <CHAR>
<ESCAPED_CHAR> ::= "\n" | "\t" | "\""

#PRIMITIVES
<NUMBER> ::= <INT> | <FLOAT>

<INT> ::= <DIGITS>

<FLOAT> ::= <SIMPLE_FLOAT> | <SIMPLE_FLOAT> <EXPONENT>
<SIMPLE_FLOAT> ::= <DIGITS> "." <DIGITS> | <DIGITS> "." | "." <DIGITS>
<EXPONENT> ::= "e"<DIGITS> | "e-"<DIGITS>


<BOOL> ::= "true" | "false"

<CHARS> ::= <CHAR> | <CHARS> <CHAR>
<CHAR> ::= <LETTER> | <SYMBOL> | <DIGIT>

<LETTER> ::= <LOW_LETTER> | <UP_LETTER> 
<LOW_LETTER> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "r" | "s" | "t" | "u" | "v" | "x" | "w" | "q" | "z"
<UP_LETTER> ::=  "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "R" | "S" | "T" | "U" | "V" | "X" | "W" | "Q" | "Z"

<SYMBOL> ::= "-" | "+" | "?" | "!" | "_" | "*" | "/" | "@" | "#" | "$" | "%" | "^" | "&" | "." | "," | "(" | ")" | "{" | "}" | "[" | "]"

<DIGITS> ::= <DIGIT> | <DIGITS> <DIGIT>
<DIGIT> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

#KEYWORDS
<NULL> ::= "null"
<THIS> ::= "this"
<BASE> ::= "base"

<PAREN_O> ::= "("
<PAREN_C> ::= ")"
<BRACE_O> ::= "{"
<BRACE_C> ::= "}"

<KW_IF> ::= "if"
<KW_ELSE> ::= "else"
<KW_WHILE> ::= "while"
<KW_RETURN> ::= "return"
<KW_WRITE> ::= "write"
<KW_READ> ::= "read"
<KW_NEW> ::= "new"
<KW_CTOR> ::= "constructor"
<KW_USING> ::= "using"
<KW_EXTENDS> ::= "extends"
<KW_CLASS> ::= "class"
<KW_INT> ::= "int"
<KW_STRING> ::= "string"
<KW_FLOAT> ::= "float"
<KW_BOOL> ::= "bool"
<KW_VOID> ::= "void"
<KW_PRIVATE> ::= "private"
<KW_PROTECTED> ::= "protected"
<KW_PUBLIC> ::= "public"
<KW_VIRTUAL> ::= "virtual"
<KW_OVERRIDE> ::= "override"
<KW_BREAK> ::= "break"
<KW_CONTINUE> ::= "continue"

<OP_ASSIGN> ::= ":="
<OP_NOT> ::= "!"

<SEMICOLON> ::= ";"
<COLON> ::= ":"
<COMMA> ::= ","


#COMMENTS
<COMMENT> ::= "##" <CHARS> | "##"
<MULTI_LINE_COMMENT> ::= "#*" <STRING_CHARS> "*#" | "#*" "*#"

#
<WHITE_SPACE> ::= " " | "\n"