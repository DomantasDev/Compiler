class Program 
{
    public int velX;
    public bool rotating;
    public Shape shape;

    public int Main()
    {
        Strings strings := new Strings();
        strings.Init();

        ShapeFactory factory := new ShapeFactory();

        Board board := new Board();
        int rowCount := 10;
        int colCount := 6;
        board.Init(rowCount, colCount, strings); 

        shape := new Line();
        shape.Init();
        shape.offsetX := colCount / 2 - 1;

        velX := 0;
        rotating := false;

        int i := 0;
        bool running := true;
        while(running)
        {
            board.SetShape(shape, strings.occupied);

            clearConsole;
            board.Draw();

            board.SetShape(shape, strings.free);

            Move();

            if(board.IsCollision(shape))
            {
                Revert();
            }

            shape.offsetY := i;

            if(board.IsCollision(shape))
            {       
                if(i = 1)
                {
                    running := false;
                    write strings.gameOver;
                    break;
                }
                shape.offsetY := shape.offsetY - 1;
                board.SetShape(shape, strings.occupied);

                board.CheckCompletedLines();

                delete shape;

                shape := factory.GetShape();
                shape.Init();
                shape.offsetX := colCount / 2 - 1;
                i := 0;
            }

            velX := 0;
            rotating := false;

            i := i + 1;
            sleep 1000;
        }

        return 0;
    }

    public void Move()
    {
            int key := getKey;
            if(key = 37)
            {
                velX := -1;
            }
            else if(key = 39)
            {
                velX := 1;
            }
            else if(key = 38)
            {
                rotating := true;
                shape.Rotate();
            }
            shape.offsetX := shape.offsetX + velX;
    }

    public void Revert()
    {
        shape.offsetX := shape.offsetX - velX;
        if(rotating)
        {
            shape.RevertRotation();
        }
    }

}

class ShapeFactory
{
    public Shape GetShape()
    {
        Shape shape := null;

        int rand := randInt 2;
        if(rand = 0)
        {
            shape := new Line();
        }
        else if(rand = 1)
        {
            shape := new Square();
        }

        shape.Init();
        return shape;
    }
}

##-------------------------------------------SHAPES-------------------------------

class Shape
{
    public int offsetX;
    public int offsetY;

    public int a;

    public void Init()
    {   
        write "SHIT";
    }

    public Point GetPoints()
    {
        write "SHIT";
    }

    public void Rotate()
    {
        write "SHIT";
    }

    public void RevertRotation()
    {
        write "SHIT";
    }
}

class Square extends Shape
{
    public Point state;

    public virtual void Init()
    {
        offsetY := 0;
        offsetX := 0;

        Point newPoint;

        state := new Point();
        state.Init(0, 0);

        newPoint := new Point();
        newPoint.Init(1, 0);
        state.Add(newPoint);

        newPoint := new Point();
        newPoint.Init(0, 1);
        state.Add(newPoint);

        newPoint := new Point();
        newPoint.Init(1, 1);
        state.Add(newPoint);
    }

    public Point GetPoints()
    {
        return state;
    }

    public void Rotate(){}

    public void RevertRotation(){}
}

class Line extends Shape
{
    public int state;

    public Point state1;
    public Point state2;

    public virtual void Init()
    {
        offsetY := 0;
        offsetX := 0;
        state := 0;
        Point newPoint;

        ##----state 1----------

        state1 := new Point();
        state1.Init(-1, 0);

        newPoint := new Point();
        newPoint.Init(0, 0);
        state1.Add(newPoint);

        newPoint := new Point();
        newPoint.Init(1, 0);
        state1.Add(newPoint);

        ##----state 2-------------

        state2 := new Point();
        state2.Init(0, -1);

        newPoint := new Point();
        newPoint.Init(0, 0);
        state2.Add(newPoint);

        newPoint := new Point();
        newPoint.Init(0, 1);
        state2.Add(newPoint);
    }

    public virtual Point GetPoints()
    {
        if(state = 0)
        {
            return state1;
        }
        else
        {
            return state2;
        }
    }

    public virtual void Rotate()
    {
        if(state = 0)
        {
            state := 1;
        }
        else
        {
            state := 0;
        }
    }

    public void RevertRotation()
    {
        Rotate();
    }
}

##----------------------------------------------POINT-------------------------------------

class Point
{
    public int X;
    public int Y;

    public Point nextPoint;

    public void Init(int x, int y)
    {
        X := x;
        Y := y;

        nextPoint := null;
    }

    public void Add(Point newPoint)
    {
        Point point := this;

        while(point.nextPoint <> null)
        {
            point := point.nextPoint;    
        }

        point.nextPoint := newPoint;
    }
}

##----------------------------------------------------BOARD---------------------------------------------------------------
class Board
{
    public Row firstRow;
    public Strings strings;

    public int rowCount;
    public int columnCount;

    public int score;

    public Tile GetTile(int row, int column)
    {
        if(row >= rowCount | column >= columnCount | row < 0 | column < 0)
        {
            return null;
        }
        return firstRow.GetRow(row).firstTile.GetTile(column);
    }

    public void Init(int rows, int columns, Strings s)
    {
        score := 0;
        rowCount := rows;
        columnCount := columns;
        strings := s;

        firstRow := new Row();

        int i := 0;
        int j := 1;

        while(i < rowCount)
        {
            Tile rootTile := new Tile();
            rootTile.Init(strings.free);

            j := 1;
            while(j < columnCount)
            {
                Tile tile := new Tile();
                tile.Init(strings.free);
                rootTile.Add(tile);
                j := j + 1;
            }

            if(i = 0)
            {
                firstRow.Init(rootTile);
            }
            else
            {
                Row row := new Row();
                row.Init(rootTile);
                firstRow.Add(row);
            }
            i := i + 1;
        }
    }

    public void Draw()
    {
        Row row := firstRow;
        Tile tile;

        while(row <> null)
        {
            tile := row.firstTile;
            while(tile <> null)
            {
                write tile.value;
                tile := tile.nextTile;
            }
            write strings.newLine;
            row := row.nextRow;
        }
        write strings.score, score, strings.newLine;
    }

    public void SetShape(Shape shape, string value)
    {
        Point points := shape.GetPoints();
        Tile tile;

        while(points <> null)
        {
            tile := GetTile(points.Y + shape.offsetY, points.X + shape.offsetX);
            tile.value := value;

            points := points.nextPoint;
        }
    }

    public bool IsCollision(Shape shape)
    {
        Point points := shape.GetPoints();
        Tile tile;

        while(points <> null)
        {
            if(points.Y + shape.offsetY >= rowCount)
            {
                return true;
            }
            tile := GetTile(points.Y + shape.offsetY, points.X + shape.offsetX);

            if(tile = null)
            {
                return true;
            }

            if(tile.value = strings.occupied)
            {
                return true;
            }
            points := points.nextPoint;
        }
        return false;
    }

    public void CheckCompletedLines()
    {
        Row row := firstRow;
        bool foundCompleted;
        int currentRow := 0;

        while(row <> null)
        {
            foundCompleted := true;
            Tile tile := row.firstTile;

            while(tile <> null)
            {
                ##write "row: ", currentRow, " value: ", tile.value, "\n";
                if(tile.value = strings.free)
                {
                   
                    foundCompleted := false;
                    break;
                }
                tile := tile.nextTile;
            }
            if(foundCompleted)
            {
                ##write "found completed: ", currentRow, "\n";
                score := score + 100;
                MoveLinesDown(currentRow);
                CheckCompletedLines();
                break;
            }
            row := row.nextRow;
            currentRow := currentRow + 1;
        }

        ##write "no completed lines\n";
    }

    public void MoveLinesDown(int completedLine)
    {
        completedLine := completedLine - 1;
        
        int i := 0;
        while(completedLine >= 0)
        {
            Row row := firstRow.GetRow(completedLine);
            Row nextRow := row.nextRow;

            if(nextRow = null)
            {
                break;
            }
            
            Tile tile := row.firstTile;
            Tile tileBellow := nextRow.firstTile;
            while(tile <> null)
            {
                tileBellow.value := tile.value;

                tile := tile.nextTile;
                tileBellow := tileBellow.nextTile;
            }

            completedLine := completedLine - 1;
        }

        Tile tilea := firstRow.firstTile;

        while(tilea <> null)
        {
            tilea.value := strings.free;
            tilea := tilea.nextTile;
        }
    }
}

##------------------------------------------------------ROW------------------------------------
class Row
{
    public Tile firstTile;

    public Row nextRow;

    public void Init(Tile tile)
    {
        firstTile := tile;
        nextRow := null;
    }

    public void Add(Row newRow)
    {
        Row row := this;

        while(row.nextRow <> null)
        {
            row := row.nextRow;    
        }

        row.nextRow := newRow;
    }

    public Row GetRow(int rowIndex)
    {
        Row row := this;
        int i := 0;

        while(i < rowIndex)
        {
            row := row.nextRow;
            i := i + 1;
        }

        return row;
    }
}

##------------------------------------------------------------TILE-----------------------
class Tile
{
    public string value;

    public Tile nextTile;

    public void Init(string s)
    {
        value := s;
       
        nextTile := null;
    }

    public void Add(Tile newTile)
    {
        Tile tile := this;

        while(tile.nextTile <> null)
        {
            tile := tile.nextTile;    
        }

        tile.nextTile := newTile;
    }

    public Tile GetTile(int column)
    {
        Tile tile := this;
        int i := 0;

        while(i < column)
        {
            tile := tile.nextTile;
            i := i + 1;
        }

        return tile;
    }
}

##---------------------------------------string constants-------------------
class Strings
{
    public string borderH;
    public string borderV;
    public string free;
    public string occupied;
    public string newLine;
    public string score;
    public string gameOver;

    public void Init()
    {
        borderV := "|";
        borderH := "";
        free := ".";
        occupied := "0";
        newLine := "\n";
        score := "score: ";
        gameOver := "\nGAME OVER";
    }
}