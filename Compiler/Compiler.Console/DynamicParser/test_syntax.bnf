<PROGRAM> ::= [Program]@0 1 <CLASS_DECL> {<CLASS_DECL>}
<ASD> ::= [Program]@0 1 <CLASS_DECL> {<CLASS_DECL>}

<CLASS_DECL> ::= [Class]@1 @ @2 *<KW_CLASS> *<IDENT> <CLASS_BODY> | [Class]@1 @2 @3 *<KW_CLASS> *<IDENT> <EXTENDS> <CLASS_BODY>  
<EXTENDS> ::= *<KW_EXTENDS> *<IDENT>
<CLASS_BODY> ::= [ClassBody]@1 *<BRACE_O> { <CLASS_MEMBER> } *<BRACE_C>

<CLASS_MEMBER> ::= <METHOD_DECL> | <CTOR_DECL> | <VARIABLE_DECL_STMT> *<SEMICOLON>

<CTOR_DECL> ::= [Constructor]@0 @2 @5 @6 <VISIBILITY> *<KW_CTOR> <PARAM_LIST> *<COLON> *<BASE> <ARG_LIST> <BODY> | [Constructor]@0 @2 @ @6 <VISIBILITY> *<KW_CTOR> <PARAM_LIST> <BODY>

<METHOD_DECL> ::= [Method]@0 @ @1 @2 @3 @4 <VISIBILITY> <RETURN_TYPE> *<IDENT> <PARAM_LIST> <BODY> | [Method]@0 @1 @2 @3 @4 @5 <VISIBILITY> <VIRTUAL_OVERRIDE> <RETURN_TYPE> *<IDENT> <PARAM_LIST> <BODY>
<BODY> ::= [MethodBody]@1 *<BRACE_O> {<STMT>} *<BRACE_C>
<VISIBILITY> ::= [Visibility]@0 *<KW_PRIVATE> | [Visibility]@0 *<KW_PROTECTED>| [Visibility]@0 *<KW_PUBLIC>
<VIRTUAL_OVERRIDE> ::= *<KW_VIRTUAL> | *<KW_OVERRIDE>

<VARIABLE_DECL_STMT> ::= [VariableDeclaration]@0 @1 @2 @4 <VISIBILITY> <TYPE> *<IDENT> *<OP_ASSIGN> <EXPR> | [VariableDeclaration]@0 @1 @2 @ <VISIBILITY> <TYPE> *<IDENT>

<RETURN_TYPE> ::= <TYPE> | [Type]@0 *<KW_VOID>
<TYPE> ::= [Type]@0 <SYSTEM_TYPE> | [Type]@0 *<IDENT>
<SYSTEM_TYPE> ::= *<KW_INT> | *<KW_STRING> | *<KW_FLOAT> | *<KW_BOOL>

<PARAM_LIST> ::= @1 *<PAREN_O> <PARAMS> *<PAREN_C> | @ *<PAREN_O> *<PAREN_C>
<PARAMS> ::= [NodeList]@0 2 <PARAM> {*<COMMA> <PARAM>}
<PARAM> ::= [Parameter]@0 @1 <TYPE> *<IDENT>

<STMT> ::= <BREAK_STMT> *<SEMICOLON> | <RETURN_STMT> *<SEMICOLON> | <CONTINUE_STMT> *<SEMICOLON> | <ASSIGN_STMT> *<SEMICOLON> | <LOCAL_VARIABLE_DECL_STMT> *<SEMICOLON> | <EXPR_STMT> *<SEMICOLON> | <WRITE_STMT> *<SEMICOLON> | <READ_STMT> *<SEMICOLON> | <WHILE_STMT> | <IF_STMT>
<EXPR_STMT> ::= [ExpressionStatement]@0 <EXPR>
<RETURN_STMT> ::= [Return]@1 *<KW_RETURN> <EXPR> |[Return]@ *<KW_RETURN>
<BREAK_STMT> ::= [LoopControl]@0 *<KW_BREAK>
<CONTINUE_STMT> ::= [LoopControl]@0 *<KW_CONTINUE>
<ASSIGN_STMT> ::= [Assign]@0 @2 *<IDENT> *<OP_ASSIGN> <EXPR> | [Assign]@2 @4 *<THIS> *<DOT_OP> *<IDENT> *<OP_ASSIGN> <EXPR>
<LOCAL_VARIABLE_DECL_STMT> ::= [LocalVariableDeclaration]@0 @1 @3 <TYPE> *<IDENT> *<OP_ASSIGN> <EXPR> | [LocalVariableDeclaration]@0 @1 @ <TYPE> *<IDENT>
<WHILE_STMT> ::= [Loop]@2 @4 *<KW_WHILE> *<PAREN_O> <EXPR> *<PAREN_C> <BODY>
<IF_STMT> ::= [If]@1 @2 @3 *<KW_IF> <CONDITION> <BODY> <ELSE> | [If]@1 @2 @ *<KW_IF> <CONDITION> <BODY>
<CONDITION> ::= @1 *<PAREN_O> <EXPR> *<PAREN_C>
<ELSE> ::= [Else]@1 @ *<KW_ELSE> <IF_STMT> | [Else]@ @1 *<KW_ELSE> <BODY>

<WRITE_STMT> ::= [Write]@1 *<KW_WRITE> <ARGS>
<READ_STMT> ::= [Read]@1 *<KW_READ> <VAR_LIST>
<VAR_LIST> ::= [NodeList]@0 2 <VAR> {*<COMMA> <VAR>}

<EXPR> ::= <OR>
<OR> ::= L[LogicExp]@0 @1 @2 <AND> {*<OR_OP> <AND>}
<AND> ::= L[LogicExp]@0 @1 @2 <EQUALS> {*<AND_OP> <EQUALS>}
<EQUALS> ::= L[EqualityExp]@0 @1 @2 <COMPARE> {*<EQUALS_OP> <COMPARE>}
<COMPARE> ::= L[ComparisonExp]@0 @1 @2 <ADD> {*<COMPARE_OP> <ADD>}
<ADD> ::= L[ArithExp]@0 @1 @2 <MULT> {*<ADD_OP> <MULT>}
<MULT> ::= L[ArithExp]@0 @1 @2 <DOT> {*<MULT_OP> <DOT>} 
<DOT> ::= L[BinaryExp]@0 @1 @2 <PRIMARY> {*<DOT_OP> <PRIMARY>}
<PRIMARY> ::= <METHOD_CALL> | [LiteralExp]@0 <VAR> | [LiteralExp]@0 <NUMBER> | [LiteralExp]@0 *<BOOL> | [LiteralExp]@0 *<STRING> | <PAREN> | <NEG> | <NOT> | <OBJ_CREATION> | <CAST> | [LiteralExp]@0 *<NULL> | [LiteralExp]@0 *<THIS> | [LiteralExp]@0 *<BASE>

<MEMBER_ACCESS> ::= <METHOD_CALL> | *<IDENT>
<PAREN> ::= @1 *<PAREN_O> <EXPR> *<PAREN_C>
<NEG> ::= [UnaryArithExp]@0 @1 *<ADD_OP> <EXPR>
<NOT> ::= [UnarylogicExp]@0 @1 *<OP_NOT> <EXPR>
<CAST> ::= [Cast]@1 @3 *<PAREN_O> <TYPE> *<PAREN_C> <EXPR>
<OBJ_CREATION> ::= [ObjCreationExp]@1 @2 *<KW_NEW> <TYPE> <ARG_LIST>
<METHOD_CALL> ::= [CallExp]@0 @1 <METHOD_NAME> <ARG_LIST>
<ARG_LIST> ::= @1 *<PAREN_O> <ARGS> *<PAREN_C> | @ *<PAREN_O> *<PAREN_C>
<ARGS> ::= [NodeList]@0 2 <EXPR> {*<COMMA> <EXPR>}
<METHOD_NAME> ::= *<IDENT>
<VAR> ::= *<IDENT>
<NUMBER> ::= *<FLOAT> | *<INT>